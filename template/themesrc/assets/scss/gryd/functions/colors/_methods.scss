

// -----------------------------------------
//   Return a normal color
// ---------------------------------------

@function to-color($value) {
	$new-value: null;
	// Check if the color exists in another way in the colorset.
	@each $color-name, $color-value in $default-color-set {
		// Check if the value given exists in any predefined colors.
		$str-value: '#{$value}';
		$str-color: to-string-color($color-name);

		// First make sure the color is not in the colorset. If so, just return the right color back. Also makes it possible to
		// Fix uppercase/lowercase mistakes. Will still give a warning that the color doesn't exist, but will return the right color.
		@if to-lower-case($str-color) == to-lower-case($str-value) {
			$new-value: $color-value;
		}

		// Check if the requested colorname exists in a color name in the existing colorset
		@else if str-contains(to-lower-case($str-value), to-lower-case($str-color))
		{
			$new-value: rgba(
				red($color-value),
				green($color-value),
				blue($color-value),
				1
			);
		}

		// Check if the requested names in the colorset exists in a requested color name
		@else if str-contains(to-lower-case($str-color), to-lower-case($str-value))
		{
			$new-value: $color-value;
		}
	}
	@if $new-value == null {
		$new-value: '#{$value}';
	}

	// Return a closer color.
	@return to-string($new-value);
}

// --------------------------------------------------------------------------
//    The main color function, get the color from  the current colorset
// ------------------------------------------------------------------------

@function color($value: null, $opacity: 1, $colorset: $default-color-set) {
	@if variable-exists(custom-colors) {
		$colorset: $custom-color-set;
	}
	// Check if value atleast is set.
	@if $value == null {
		@warn "No color given";
		@return null;
	}

	// check Value type and convert the color always to a string.

	$value-type: type-of($value);

	// When the type is 'color' we need to either convert color to a string
	// or directly pass it back when its an actual color
	@if is-string-color($value) {
		$value: to-string($value);
	} @else {
		@return to-string-color($value, $opacity);
	}

	// Check if the color exist in the current colorset

	@if color-exist('#{$value}', $colorset) {
		@return rgba(get-color('#{$value}', $colorset), $opacity);
	}

	// The last resort for return
	@else {
		@warn "[function color] #{$value} (#{type-of($value)}) does not exist in the current colorset.";
		@return null;
	}
}

// -----------------------------------------------------------------------
//    Check if the type of a color and return if its not a rgb or hex
// ---------------------------------------------------------------------

@function is-string-color($value) {
	$value: to-string($value);

	@if str-slice('#{$value}', 1, 1) == '#' {
		@return false;
	}

	// Check if the color is a rgb color.

	@else if str-slice('#{$value}', 1, 3) == 'rgb' {
		@return false;
	}

	// Else, just return the string and make the best of it.

	@else {
		@return true;
	}
}

// ------------------------------------------------
//    Convert the string back to an actual color
//    and always to a rgba color with opacity
// ---------------------------------------------

@function to-string-color($value, $opacity: 1) {
	// Check if the color is a hex color.

	@if str-slice('#{$value}', 1, 1) == '#' {
		@return $value;
	}
	// Check if the color is a rgb color.

	@else if str-slice('#{$value}', 1, 3) == 'rgb' {
		@return rgba(red($value), green($value), blue($value), $opacity);
	} @else {
		@return '#{$value}';
	}
}

// ------------------------------------------------------------
//    Check if the color is a rgb, hex or a specific
//    color from the existing colorset and return a color
// ---------------------------------------------------------

@function to-defined-color($color, $return: 'string') {
	@if is-string-color(to-string($color)) {
		@if color-exist(to-string($color)) {
			@return color(to-string($color));
		} @else {
			@return $color;
		}
	} @else if $return == 'string' {
		@return to-string-color($color);
	} @else if $return == 'color' {
		@return $color;
	}
}

// ----------------------------------------------------
//    Check if the color exists in the current set
// --------------------------------------------------

@function color-exist($value, $colorset: $default-color-set) {
	// Return true if the color exists in the current colorset; Or false when not.
	@if map-get($colorset, $value) or
		map-get($colorset, str-slice($value, 2, str-length($value)))
	{
		@return true;
	} @else {
		@return false;
	}
}

// -----------------------------------------
//    Get the color from the colorset;
// ---------------------------------------

@function get-color($value, $colorset: $default-color-set) {
	// Return the color if the color exists in the current colorset; Or nothing + a warning when not.

	$_: false;
	@if str-index($value, '_') == 1 {
		$_: true;
	}
	@if color-exist($value, $colorset) {
		@if $_ {
			@return map-get($colorset, str-slice($value, 2, str-length($value)));
		} @else {
			@return map-get($colorset, $value);
		}
	} @else {
		@warn "[function get-color]#{$value} does not exist in the current colorset";
		@return '';
	}
}

// ------------------------------------------------------
//    Get the opposite color (either black or white)
// ----------------------------------------------------

@function contra($value, $opacity: 1, $colors: null, $contrast: 57.5) {
	$color: black;
	$bw: ();
	// Define dark and light colors to return.

	//  Alternative dark and light can be given in a map form.
	// `contra([COLOR],1,([DARKCOLOR],[LIGHTCOLOR]);`

	@if $colors != null {
		@if length($colors) == 2 {
			$bw: (nth($colors, 1), nth($colors, 2));
		} @else {
			@warn "[function contra] Set with alternative has a invalid amount of values (#{length($colors)})";
		}
	} @else {
		$bw: define-bw($opacity);
	}

	// When the type is 'color' we need to either convert color to a string
	// or directly pass it back when its an actual color.
	$color: to-defined-color($value);

	// Get the brightness value

	$brightness: color-brightness($color, false);

	@if $brightness > $contrast {
		@return nth($bw, 1);
	} @else {
		@return nth($bw, 2);
	}
}
