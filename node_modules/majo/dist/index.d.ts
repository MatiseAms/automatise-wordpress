/// <reference types="node" />
import { Stats } from 'fs';
export declare type Middleware = (stream: Majo) => any;
export interface IFiles {
    /** Relative path to the file */
    [relative: string]: IFile;
}
export interface IFile {
    /** File contents */
    contents: Buffer;
    /** File stats */
    stats: Stats;
    /** Absolute path to the file */
    path: string;
}
export declare type FilterFn = (relative: string, file: IFile) => boolean;
export declare type TransformFn = (contents: string) => string | Promise<string>;
export declare class Majo {
    middlewares: Middleware[];
    /**
     * An object which is shared across middlewares, you can use this to pass down data from a middleware to another.
     */
    meta: {
        [key: string]: any;
    };
    /** The base dir to look for files */
    baseDir: string;
    /** Glob patterns */
    sourcePatterns: string | string[];
    /** Allow dot files */
    dotFiles: boolean;
    /** The files found in `baseDir` */
    files: IFiles;
    constructor();
    /**
     * Define how to find files
     * @param source Glob patterns
     * @param options
     * @param options.baseDir The base dir to look for files
     * @param options.dotFiles Include dot files
     */
    source(source: string | string[], {baseDir, dotFiles}?: {
        baseDir?: string;
        dotFiles?: boolean;
    }): this;
    /**
     * Add middleware
     * @param middleware Middleware
     */
    use(middleware: Middleware): this;
    /**
     * Process all middlewares
     */
    process(): Promise<IFiles>;
    /**
     * Add a filter to include/exclude files
     */
    filter(fn: FilterFn): this;
    /**
     * Transform files
     * @param relative Relative path of a file
     * @param fn The function to transform file
     */
    transform(relative: string, fn: TransformFn): Promise<this>;
    /**
     * Write files
     * @param dest The output directory
     * @param options
     * @param options.baseDir The base directory to resolve `dest`
     * @param options.clean Whether to clean output directory before writing
     */
    dest(dest: string, {baseDir, clean}?: {
        baseDir?: string;
        clean?: boolean;
    }): Promise<void>;
    /**
     * Get contents of specific file
     * @param relative The relative path of a file
     */
    fileContents(relative: string): string;
    /**
     * Write contents to a file
     * @param relative The relative path of a file
     * @param str File contents as a string
     */
    writeContents(relative: string, str: string): this;
    /**
     * Get the stats of a file
     * @param relative The relative path of a file
     */
    fileStats(relative: string): Stats;
    /**
     * Get a file
     * @param relative The relative path of a file
     */
    file(relative: string): IFile;
    /**
     * Delete a file
     * @param relative The relative path of a file
     */
    deleteFile(relative: string): this;
    /**
     * Create a file
     * @param relative The relative path of a file
     * @param file File
     */
    createFile(relative: string, file: IFile): this;
    /**
     * Get the list of file names
     */
    readonly fileList: string[];
}
declare const majo: () => Majo;
export default majo;
